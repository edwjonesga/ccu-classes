options {
  STATIC = false;
}

PARSER_BEGIN(MyParser)
import java.util.ArrayList;
import java.util.List;
public class MyParser {
    public static void main(String[] args) throws ParseException {
        MyParser parser = new MyParser(System.in);
        String val = parser.Start();
        System.out.println("Parsing completed.\n"+val);
    }
}

PARSER_END(MyParser)

// Whitespace to skip (add more here)
SKIP : {
    " "|
    "\n"
}

TOKEN : { < INT: "int" > }
TOKEN : { < IDENTIFIER: (["a"-"z", "A"-"Z"])+ > }
TOKEN : { < ASSIGN: "=" > }
TOKEN : { < INT_LITERAL: (["0"-"9"])+ > }
TOKEN : { < SEMI: ";" > }
TOKEN : { < LPAREN: "(" > }
TOKEN : { < RPAREN: ")" > }

// Your real tokens go below this line (to be filled in by students)
// For example:
// TOKEN : { < IF: "if" > }

String Start() : {
    List<String> ast;
    List<String> intDecl;
}
{
    intDecl = IntDecl() (
    ast = AssignmentPart(intDecl) |
    ast = FunctionDeclarationPart(intDecl))
    <EOF>
    {
        return ast.toString();
    }
}

// ----------- EXAMPLE ASSIGNMENT RULE ------------------

List<String> IntDecl() : {
    Token var, val;
    List<String> toks = new ArrayList<>();
}
{
    <INT> var=<IDENTIFIER> 
    {
        toks.add("int");
        toks.add(var.image);
        return toks;
    }
}

List<String> AssignmentPart(List<String> toks) : {
    Token var, val;
}
{
    <ASSIGN> val=<INT_LITERAL> <SEMI>
    {
        toks.add("=");
        toks.add(val.image);
        toks.add(";");
        return toks;
    }
}

List<String> FunctionDeclarationPart(List<String> toks) : {
    Token var;
}
{
     <LPAREN><RPAREN> <SEMI>
    {
        toks.add("(");
        toks.add(")");
        toks.add(";");
        return toks;
    }
}